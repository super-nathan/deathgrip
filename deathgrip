#!/usr/bin/python3

## Transit string:
# as of now the tranmsited message (encodedMessage) is sent as follows:
# date,time,randomNumber, letter, letter, ................

#First we import some libraries. These will include additional functions that we need.
import math
import configparser
config = configparser.ConfigParser()
import time
import random
import os
import os.path
import sys
from optparse import OptionParser

# a quick definition
encodedMessage = ""
global fileName
global confFile
confFile = ""
dryRun = 0
encode = 0
decode = 0
outputFile = "output.txt"


# the parser is a better way to read command line arguments!
parser = OptionParser()
parser.add_option("-i", "--input", dest="filename", help="write report to a file", metavar="FOO", action="store", type="string")
parser.add_option("-o", "--output", dest="outfile", help="specify output to a file", metavar="BAR", action="store", type="string", default="output.txt")  
parser.add_option("-c", "--config", dest="confParse", help="write report to a file", metavar="FOO", action="store", type="string")
parser.add_option("-v", "--verbose", action="count", dest="verbosity", help="print output", default=0)  
parser.add_option("-e", "--encode", action="count", dest="encode", help="print output", default=0)  
parser.add_option("-d", "--decode", action="count", dest="decode", help="print output", default=0)  
parser.add_option("--dry-run", action="count", dest="dryrun", help="same as verbose with no output file", default=0)  
(options, args) = parser.parse_args()
fileName = options.filename
encode = options.encode
decode = options.decode
confParse = options.confParse
verbosity = options.verbosity
outputFile = options.outfile
dryRun = options.dryrun
if dryRun > 0:
	verbosity = 1
if not options.filename: 
    parser.error("You must specify an input file")
if encode == 0 and decode == 0:
	    parser.error("You must specify to encode or decode")


## first hting we need to do is define the config file
# we will check in the local folder, then the users home, then if 
# not fould we will use the default from /etc
# if the user has no configs it will throw and error and exit

if len(confFile) > 1:
	confFile = confParse
elif os.path.isfile("./deathgrip.conf") == True:
	confFile = "./deathgrip.conf"
elif os.path.isfile("~/.deathgrip.conf") == True:
	confFile = "~/.deathgrip.conf"
elif os.path.isfile("~/.config/deathgrip/deathgrip.conf") == True:
	confFile = "~/.config/deathgrip/deathgrip.conf"
elif os.path.isfile("/etc/deathgrip.conf") == True:
	confFile = "/etc/deathgrip.conf"
else:
	parser.error("You don't have a config file")


if encode == 1:
	# we are going to create a main function, this will be important later, when we need to decide if we are encoding or decoding
	def main():
		makeTime();
		readFile();
		setupTransmit();
		doMath();
		writeFile();

		

	def makeTime():
		global transmitTime
		global transmitDate
		global transmitRando
		global encodeDate
		global encodeTime
		global crazyMath
		global randDo
		randDo = random.randint(0,999)
		cleanTime = time.strftime('%H%M')
		cleanDate = time.strftime('%Y%m%d')
		transmitTime = int(cleanTime) + randDo
		transmitDate = int(cleanDate) + randDo
		transmitTime = int(transmitTime)**6
		transmitDate = int(cleanDate)**3
		transmitRando = int(randDo)**4
		crazyMath = cleanTime
		crazyMath += cleanDate



	# I decided to use a random variable and add it to the time. The date will never repeat so there is
	# no chance of a pattern being discovered by crackers. Hoewever, if a message was sent at the same 
	# time everyday it would have the same time string. In order to confuse crackers we will also use
	# a random number that we will transmit so that time is hidden
	def setupTransmit():
		global transmitTime
		global transmitDate
		global encodedMessage
		transmitDateNew = str(transmitDate).zfill(30)
		transmitTimeNew = str(transmitTime).zfill(30)
		transmitRandoNew = str(transmitRando).zfill(30)
		encodedMessage += str(transmitDateNew)
		encodedMessage += str(transmitTimeNew)
		encodedMessage += str(transmitRandoNew)





	def readFile():
		global workString
		openFile = sys.argv[1]
		workString = open(fileName, 'r').read()
		#delete the next line if you add capitals
		workString = workString.lower()
		if verbosity >= 1 :
			print (workString)

	# this is the meat and potatos		
	def doMath():
		global confFile
		config.read(confFile)
		global encodedMessage
		for char in workString:
				if char == "a":
					b = int(config['KEY']['A'])
				elif char == "b":
					b = int(config['KEY']['B'])
				elif char == "c":
					b = int(config['KEY']['C'])
				elif char == "d":
					b = int(config['KEY']['D'])
				elif char == "e":
					b = int(config['KEY']['E'])
				elif char == "f":
					b = int(config['KEY']['F'])
				elif char == "g":
					b = int(config['KEY']['G'])
				elif char == "h":
					b = int(config['KEY']['H'])
				elif char == "i":
					b = int(config['KEY']['I'])
				elif char == "j":
					b = int(config['KEY']['J'])
				elif char == "k":
					b = int(config['KEY']['K'])
				elif char == "l":
					b = int(config['KEY']['L'])
				elif char == "m":
					b = int(config['KEY']['M'])
				elif char == "n":
					b = int(config['KEY']['N'])
				elif char == "o":
					b = int(config['KEY']['O'])
				elif char == "p":
					b = int(config['KEY']['P'])
				elif char == "q":
					b = int(config['KEY']['Q'])
				elif char == "r":
					b = int(config['KEY']['R'])
				elif char == "s":
					b = int(config['KEY']['S'])
				elif char == "t":
					b = int(config['KEY']['T'])
				elif char == "u":
					b = int(config['KEY']['U'])
				elif char == "v":
					b = int(config['KEY']['V'])
				elif char == "w":
					b = int(config['KEY']['W'])
				elif char == "x":
					b = int(config['KEY']['X'])
				elif char == "y":
					b = int(config['KEY']['Y'])
				elif char == "z":
					b = int(config['KEY']['Z'])
				elif char == " ":
					b = int(config['KEY']['SPACE'])
				elif char == "1":
					b = int(config['KEY']['ONE'])
				elif char == "2":
					b = int(config['KEY']['TWO'])
				elif char == "3":
					b = int(config['KEY']['THREE'])
				elif char == "4":
					b = int(config['KEY']['FOUR'])
				elif char == "5":
					b = int(config['KEY']['FIVE'])
				elif char == "6":
					b = int(config['KEY']['SIX'])
				elif char == "7":
					b = int(config['KEY']['SEVEN'])
				elif char == "8":
					b = int(config['KEY']['EIGHT'])
				elif char == "9":
					b = int(config['KEY']['NINE'])
				elif char == "0":
					b = int(config['KEY']['ZERO'])
				elif char == ".":
					b = int(config['KEY']['PERIOD'])
				elif char == ",":
					b = int(config['KEY']['COMMA'])
				elif char == "?":
					b = int(config['KEY']['QUESTION'])
				elif char == "!":
					b = int(config['KEY']['EXCLAIM'])
				elif char == "\n":
					b = int(config['KEY']['NEWLINE'])
				else:
					b = 0
				newLetter = int(b)*int(crazyMath)
				newLetter = newLetter**2
				newNewLetter = str(newLetter).zfill(30)
				encodedMessage += str(newNewLetter)
				

	#Lets write this to an output file
	def writeFile():
		if verbosity >= 1 :
			print(encodedMessage)
		if dryRun == 0 :
			f = open(outputFile, 'w')
			f.write(encodedMessage)
			f.close()

	# Since EVERYTHING before this is definistions, running this one function, runs the program	
	main();

elif decode == 1:
	# we are going to create a main function, this will be important later, when we need to decide if we are encoding or decoding
	def main():

		readMessage();
		receiveSalt();
		doMoreMath();
		writeDecodedFile();


	def readMessage():
		global workStringTwo
		openFile = sys.argv[1]
		workStringTwo = open(fileName, 'r').read()
		if verbosity >= 1 :
			print (workStringTwo)

	def receiveSalt():
		global receivedTime
		global receivedDate
		global receivedRando
		global decodedMessage
		global workStringTwo
		global crazyMathTwo
		decodedMessage = ""
		receivedDate = workStringTwo[:30]
		receivedDate = float(receivedDate)
		workStringTwo = workStringTwo[30:]
		receivedTime = workStringTwo[:30]
		receivedTime = float(receivedTime)
		workStringTwo = workStringTwo[30:]
		receivedRando = workStringTwo[:30]
		receivedRando = float(receivedRando)
		workStringTwo = workStringTwo[30:]
		realRando = math.pow(receivedRando, 1/4)
		realRando = float(realRando)
		realTime = math.pow(receivedTime, 1/6)
		realTime = realTime - realRando
		realTime = int(realTime)
		realDate = math.pow(receivedDate, 1/3)
		realDate = realDate - realRando
		realDate = int(realDate)
		decodedMessage += "Time was:"
		decodedMessage += str(realTime)
		decodedMessage += "\n"	
		decodedMessage += "Date was:"
		decodedMessage += str(realDate)
		decodedMessage += "\n"	
		decodedMessage += "\n"
		realTime = str(realTime)
		realDate = str(realDate)
		crazyMathTwo = realTime
		crazyMathTwo += realDate
		crazyMathTwo = int(crazyMathTwo)


	# this is the meat and potatos		
	def doMoreMath():
		global confFile
		config.read(confFile)
		global workStringTwo
		global testVal
		global decodedMessage
		testVal = 0
		while len(workStringTwo) > 1:
			workStringThree = workStringTwo[:30]
			workStringThree = float(workStringThree)
			testVal = math.pow(workStringThree, 1/2)
			testVal = testVal / int(crazyMathTwo)
			testVal = int(testVal)
			if testVal == int(config['KEY']['A']):
				b = "a"
			elif testVal == int(config['KEY']['B']):
				b = "b"
			elif testVal == int(config['KEY']['C']):
				b = "c"
			elif testVal == int(config['KEY']['D']):
				b = "d"
			elif testVal == int(config['KEY']['E']):
				b = "e"
			elif testVal == int(config['KEY']['F']):
				b = "f"
			elif testVal == int(config['KEY']['G']):
				b = "g"
			elif testVal == int(config['KEY']['H']):
				b = "h"
			elif testVal == int(config['KEY']['I']):
				b = "i"
			elif testVal == int(config['KEY']['j']):
				b = "j"
			elif testVal == int(config['KEY']['K']):
				b = "k"
			elif testVal == int(config['KEY']['L']):
				b = "l"
			elif testVal == int(config['KEY']['M']):
				b = "m"
			elif testVal == int(config['KEY']['N']):
				b = "n"
			elif testVal == int(config['KEY']['O']):
				b = "o"
			elif testVal == int(config['KEY']['P']):
				b = "p"
			elif testVal == int(config['KEY']['Q']):
				b = "q"
			elif testVal == int(config['KEY']['R']):
				b = "r"
			elif testVal == int(config['KEY']['S']):
				b = "s"
			elif testVal == int(config['KEY']['T']):
				b = "t"
			elif testVal == int(config['KEY']['U']):
				b = "u"
			elif testVal == int(config['KEY']['V']):
				b = "v"
			elif testVal == int(config['KEY']['W']):
				b = "w"
			elif testVal == int(config['KEY']['X']):
				b = "x"
			elif testVal == int(config['KEY']['Y']):
				b = "y"
			elif testVal == int(config['KEY']['Z']):
				b = "z"
			elif testVal == int(config['KEY']['SPACE']):
				b = " "
			elif testVal == int(config['KEY']['ONE']):
				b = "1"
			elif testVal == int(config['KEY']['TWO']):
				b = "2"
			elif testVal == int(config['KEY']['THREE']):
				b = "3"
			elif testVal == int(config['KEY']['FOUR']):
				b = "4"
			elif testVal == int(config['KEY']['FIVE']):
				b = "5"
			elif testVal == int(config['KEY']['SIX']):
				b = "6"
			elif testVal == int(config['KEY']['SEVEN']):
				b = "7"
			elif testVal == int(config['KEY']['EIGHT']):
				b = "8"
			elif testVal == int(config['KEY']['NINE']):
				b = "9"
			elif testVal == int(config['KEY']['ZERO']):
				b = "0"
			elif testVal == int(config['KEY']['PERIOD']):
				b = "."
			elif testVal == int(config['KEY']['COMMA']):
				b = ","
			elif testVal == int(config['KEY']['QUESTION']):
				b = "?"
			elif testVal == int(config['KEY']['EXCLAIM']):
				b = "!"
			elif testVal == int(config['KEY']['NEWLINE']):
				b = "\n"
			else:
				b = ""
			newLetter = str(b)
			decodedMessage += str(newLetter)
			workStringTwo = workStringTwo[30:]
				

	#Lets write this to an output file
	def writeDecodedFile():
		if verbosity >= 1 :
			print(decodedMessage)
		if dryRun == 0 :
			f = open(outputFile, 'w')
			f.write(decodedMessage)
			f.close()

	# Since EVERYTHING before this is definistions, running this one function, runs the program	
	main();


# In theory this never runs
else:
	print("there have been errors")
